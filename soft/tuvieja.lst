CCS PCH C Compiler, Version 5.093, 4770               03-ago.-23 16:17

               Filename:   C:\Users\ivanm\OneDrive\Escritorio\Colegio Labo\PROYECTO\soft\tuvieja.lst

               ROM used:   2378 bytes (4%)
                           Largest free fragment is 63154
               RAM used:   51 (1%) at main() level
                           78 (2%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   085C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   00E4
00060:  MOVFF  0E,00
00064:  MOVFF  0F,01
00068:  MOVFF  10,02
0006C:  MOVFF  11,03
00070:  MOVFF  0C,FE9
00074:  MOVFF  07,FEA
00078:  BSF    07.7
0007A:  MOVFF  08,FE1
0007E:  MOVFF  09,FE2
00082:  MOVFF  0A,FD9
00086:  MOVFF  0B,FDA
0008A:  MOVFF  12,FF3
0008E:  MOVFF  13,FF4
00092:  MOVFF  14,FFA
00096:  MOVFF  15,FF5
0009A:  MOVFF  16,FF6
0009E:  MOVFF  17,FF7
000A2:  MOVF   04,W
000A4:  MOVFF  06,FE0
000A8:  MOVFF  05,FD8
000AC:  RETFIE 0
.................... #include "main.h"
.................... #include <18F4620.h>
.................... //////////// Standard Header file for the PIC18F4620 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4620
000AE:  CLRF   FF7
000B0:  ADDLW  BE
000B2:  MOVWF  FF6
000B4:  MOVLW  00
000B6:  ADDWFC FF7,F
000B8:  TBLRD*+
000BA:  MOVF   FF5,W
000BC:  RETURN 0
000BE:  DATA 28,0C
000C0:  DATA 01,06
000C2:  DATA 0C,53
000C4:  DATA 65,71
000C6:  DATA 75,65
000C8:  DATA 64,61
000CA:  DATA 64,3A
000CC:  DATA 20,20
000CE:  DATA 20,20
000D0:  DATA 25,75
000D2:  DATA 0A,54
000D4:  DATA 65,6D
000D6:  DATA 70,65
000D8:  DATA 72,61
000DA:  DATA 74,75
000DC:  DATA 72,61
000DE:  DATA 3A,20
000E0:  DATA 25,75
000E2:  DATA 00,00
*
0027C:  MOVLW  8E
0027E:  MOVWF  00
00280:  MOVFF  3D,01
00284:  MOVFF  3C,02
00288:  CLRF   03
0028A:  MOVF   01,F
0028C:  BNZ   02A0
0028E:  MOVFF  02,01
00292:  CLRF   02
00294:  MOVLW  08
00296:  SUBWF  00,F
00298:  MOVF   01,F
0029A:  BNZ   02A0
0029C:  CLRF   00
0029E:  BRA    02B0
002A0:  BCF    FD8.0
002A2:  BTFSC  01.7
002A4:  BRA    02AE
002A6:  RLCF   02,F
002A8:  RLCF   01,F
002AA:  DECF   00,F
002AC:  BRA    02A0
002AE:  BCF    01.7
002B0:  RETURN 0
002B2:  MOVF   40,W
002B4:  BTFSC  FD8.2
002B6:  BRA    039A
002B8:  MOVWF  00
002BA:  MOVF   44,W
002BC:  BTFSC  FD8.2
002BE:  BRA    039A
002C0:  ADDWF  00,F
002C2:  BNC   02CC
002C4:  MOVLW  81
002C6:  ADDWF  00,F
002C8:  BC    039A
002CA:  BRA    02D4
002CC:  MOVLW  7F
002CE:  SUBWF  00,F
002D0:  BNC   039A
002D2:  BZ    039A
002D4:  MOVFF  41,48
002D8:  MOVF   45,W
002DA:  XORWF  48,F
002DC:  BSF    41.7
002DE:  BSF    45.7
002E0:  MOVF   43,W
002E2:  MULWF  47
002E4:  MOVFF  FF4,4A
002E8:  MOVF   42,W
002EA:  MULWF  46
002EC:  MOVFF  FF4,03
002F0:  MOVFF  FF3,49
002F4:  MULWF  47
002F6:  MOVF   FF3,W
002F8:  ADDWF  4A,F
002FA:  MOVF   FF4,W
002FC:  ADDWFC 49,F
002FE:  MOVLW  00
00300:  ADDWFC 03,F
00302:  MOVF   43,W
00304:  MULWF  46
00306:  MOVF   FF3,W
00308:  ADDWF  4A,F
0030A:  MOVF   FF4,W
0030C:  ADDWFC 49,F
0030E:  MOVLW  00
00310:  CLRF   02
00312:  ADDWFC 03,F
00314:  ADDWFC 02,F
00316:  MOVF   41,W
00318:  MULWF  47
0031A:  MOVF   FF3,W
0031C:  ADDWF  49,F
0031E:  MOVF   FF4,W
00320:  ADDWFC 03,F
00322:  MOVLW  00
00324:  ADDWFC 02,F
00326:  MOVF   41,W
00328:  MULWF  46
0032A:  MOVF   FF3,W
0032C:  ADDWF  03,F
0032E:  MOVF   FF4,W
00330:  ADDWFC 02,F
00332:  MOVLW  00
00334:  CLRF   01
00336:  ADDWFC 01,F
00338:  MOVF   43,W
0033A:  MULWF  45
0033C:  MOVF   FF3,W
0033E:  ADDWF  49,F
00340:  MOVF   FF4,W
00342:  ADDWFC 03,F
00344:  MOVLW  00
00346:  ADDWFC 02,F
00348:  ADDWFC 01,F
0034A:  MOVF   42,W
0034C:  MULWF  45
0034E:  MOVF   FF3,W
00350:  ADDWF  03,F
00352:  MOVF   FF4,W
00354:  ADDWFC 02,F
00356:  MOVLW  00
00358:  ADDWFC 01,F
0035A:  MOVF   41,W
0035C:  MULWF  45
0035E:  MOVF   FF3,W
00360:  ADDWF  02,F
00362:  MOVF   FF4,W
00364:  ADDWFC 01,F
00366:  INCF   00,F
00368:  BTFSC  01.7
0036A:  BRA    0376
0036C:  RLCF   49,F
0036E:  RLCF   03,F
00370:  RLCF   02,F
00372:  RLCF   01,F
00374:  DECF   00,F
00376:  MOVLW  00
00378:  BTFSS  49.7
0037A:  BRA    0390
0037C:  INCF   03,F
0037E:  ADDWFC 02,F
00380:  ADDWFC 01,F
00382:  MOVF   01,W
00384:  BNZ   0390
00386:  MOVF   02,W
00388:  BNZ   0390
0038A:  MOVF   03,W
0038C:  BNZ   0390
0038E:  INCF   00,F
00390:  BTFSC  48.7
00392:  BSF    01.7
00394:  BTFSS  48.7
00396:  BCF    01.7
00398:  BRA    03A2
0039A:  CLRF   00
0039C:  CLRF   01
0039E:  CLRF   02
003A0:  CLRF   03
003A2:  RETURN 0
003A4:  MOVF   40,W
003A6:  BTFSC  FD8.2
003A8:  BRA    04F4
003AA:  MOVWF  4C
003AC:  MOVF   44,W
003AE:  BTFSC  FD8.2
003B0:  BRA    04F4
003B2:  SUBWF  4C,F
003B4:  BNC   03C0
003B6:  MOVLW  7F
003B8:  ADDWF  4C,F
003BA:  BTFSC  FD8.0
003BC:  BRA    04F4
003BE:  BRA    03CC
003C0:  MOVLW  81
003C2:  SUBWF  4C,F
003C4:  BTFSS  FD8.0
003C6:  BRA    04F4
003C8:  BTFSC  FD8.2
003CA:  BRA    04F4
003CC:  MOVFF  4C,00
003D0:  CLRF   01
003D2:  CLRF   02
003D4:  CLRF   03
003D6:  CLRF   4B
003D8:  MOVFF  41,4A
003DC:  BSF    4A.7
003DE:  MOVFF  42,49
003E2:  MOVFF  43,48
003E6:  MOVLW  19
003E8:  MOVWF  4C
003EA:  MOVF   47,W
003EC:  SUBWF  48,F
003EE:  BC    040A
003F0:  MOVLW  01
003F2:  SUBWF  49,F
003F4:  BC    040A
003F6:  SUBWF  4A,F
003F8:  BC    040A
003FA:  SUBWF  4B,F
003FC:  BC    040A
003FE:  INCF   4B,F
00400:  INCF   4A,F
00402:  INCF   49,F
00404:  MOVF   47,W
00406:  ADDWF  48,F
00408:  BRA    045A
0040A:  MOVF   46,W
0040C:  SUBWF  49,F
0040E:  BC    0434
00410:  MOVLW  01
00412:  SUBWF  4A,F
00414:  BC    0434
00416:  SUBWF  4B,F
00418:  BC    0434
0041A:  INCF   4B,F
0041C:  INCF   4A,F
0041E:  MOVF   46,W
00420:  ADDWF  49,F
00422:  MOVF   47,W
00424:  ADDWF  48,F
00426:  BNC   045A
00428:  INCF   49,F
0042A:  BNZ   045A
0042C:  INCF   4A,F
0042E:  BNZ   045A
00430:  INCF   4B,F
00432:  BRA    045A
00434:  MOVF   45,W
00436:  IORLW  80
00438:  SUBWF  4A,F
0043A:  BC    0458
0043C:  MOVLW  01
0043E:  SUBWF  4B,F
00440:  BC    0458
00442:  INCF   4B,F
00444:  MOVF   45,W
00446:  IORLW  80
00448:  ADDWF  4A,F
0044A:  MOVF   46,W
0044C:  ADDWF  49,F
0044E:  BNC   0422
00450:  INCF   4A,F
00452:  BNZ   0422
00454:  INCF   4B,F
00456:  BRA    0422
00458:  BSF    03.0
0045A:  DECFSZ 4C,F
0045C:  BRA    0460
0045E:  BRA    0476
00460:  BCF    FD8.0
00462:  RLCF   48,F
00464:  RLCF   49,F
00466:  RLCF   4A,F
00468:  RLCF   4B,F
0046A:  BCF    FD8.0
0046C:  RLCF   03,F
0046E:  RLCF   02,F
00470:  RLCF   01,F
00472:  RLCF   4D,F
00474:  BRA    03EA
00476:  BTFSS  4D.0
00478:  BRA    0486
0047A:  BCF    FD8.0
0047C:  RRCF   01,F
0047E:  RRCF   02,F
00480:  RRCF   03,F
00482:  RRCF   4D,F
00484:  BRA    048A
00486:  DECF   00,F
00488:  BZ    04F4
0048A:  BTFSC  4D.7
0048C:  BRA    04CA
0048E:  BCF    FD8.0
00490:  RLCF   48,F
00492:  RLCF   49,F
00494:  RLCF   4A,F
00496:  RLCF   4B,F
00498:  MOVF   47,W
0049A:  SUBWF  48,F
0049C:  BC    04AC
0049E:  MOVLW  01
004A0:  SUBWF  49,F
004A2:  BC    04AC
004A4:  SUBWF  4A,F
004A6:  BC    04AC
004A8:  SUBWF  4B,F
004AA:  BNC   04E0
004AC:  MOVF   46,W
004AE:  SUBWF  49,F
004B0:  BC    04BC
004B2:  MOVLW  01
004B4:  SUBWF  4A,F
004B6:  BC    04BC
004B8:  SUBWF  4B,F
004BA:  BNC   04E0
004BC:  MOVF   45,W
004BE:  IORLW  80
004C0:  SUBWF  4A,F
004C2:  BC    04CA
004C4:  MOVLW  01
004C6:  SUBWF  4B,F
004C8:  BNC   04E0
004CA:  INCF   03,F
004CC:  BNZ   04E0
004CE:  INCF   02,F
004D0:  BNZ   04E0
004D2:  INCF   01,F
004D4:  BNZ   04E0
004D6:  INCF   00,F
004D8:  BZ    04F4
004DA:  RRCF   01,F
004DC:  RRCF   02,F
004DE:  RRCF   03,F
004E0:  MOVFF  41,4C
004E4:  MOVF   45,W
004E6:  XORWF  4C,F
004E8:  BTFSS  4C.7
004EA:  BRA    04F0
004EC:  BSF    01.7
004EE:  BRA    04FC
004F0:  BCF    01.7
004F2:  BRA    04FC
004F4:  CLRF   00
004F6:  CLRF   01
004F8:  CLRF   02
004FA:  CLRF   03
004FC:  RETURN 0
004FE:  MOVLW  8E
00500:  MOVWF  00
00502:  MOVF   3C,W
00504:  SUBWF  00,F
00506:  MOVFF  3D,02
0050A:  MOVFF  3E,01
0050E:  BSF    02.7
00510:  MOVF   00,F
00512:  BZ    0526
00514:  BCF    FD8.0
00516:  MOVF   02,F
00518:  BNZ   051E
0051A:  MOVF   01,F
0051C:  BZ    0526
0051E:  RRCF   02,F
00520:  RRCF   01,F
00522:  DECFSZ 00,F
00524:  BRA    0514
00526:  BTFSS  3D.7
00528:  BRA    0534
0052A:  COMF   01,F
0052C:  COMF   02,F
0052E:  INCF   01,F
00530:  BTFSC  FD8.2
00532:  INCF   02,F
00534:  RETURN 0
*
00578:  TBLRD*+
0057A:  MOVFF  FF6,3D
0057E:  MOVFF  FF7,3E
00582:  MOVFF  FF5,3F
00586:  RCALL  0536
00588:  MOVFF  3D,FF6
0058C:  MOVFF  3E,FF7
00590:  DECFSZ 3C,F
00592:  BRA    0578
00594:  RETURN 0
00596:  MOVF   3F,W
00598:  CLRF   01
0059A:  SUBWF  3E,W
0059C:  BC    05A4
0059E:  MOVFF  3E,00
005A2:  BRA    05BC
005A4:  CLRF   00
005A6:  MOVLW  08
005A8:  MOVWF  40
005AA:  RLCF   3E,F
005AC:  RLCF   00,F
005AE:  MOVF   3F,W
005B0:  SUBWF  00,W
005B2:  BTFSC  FD8.0
005B4:  MOVWF  00
005B6:  RLCF   01,F
005B8:  DECFSZ 40,F
005BA:  BRA    05AA
005BC:  RETURN 0
005BE:  MOVF   01,W
005C0:  MOVFF  3C,3E
005C4:  MOVLW  64
005C6:  MOVWF  3F
005C8:  RCALL  0596
005CA:  MOVFF  00,3C
005CE:  MOVF   01,W
005D0:  MOVLW  30
005D2:  BNZ   05E2
005D4:  BTFSS  3D.1
005D6:  BRA    05F0
005D8:  BTFSC  3D.3
005DA:  BRA    05F0
005DC:  BTFSC  3D.4
005DE:  MOVLW  20
005E0:  BRA    05E8
005E2:  BCF    3D.3
005E4:  BCF    3D.4
005E6:  BSF    3D.0
005E8:  ADDWF  01,F
005EA:  MOVFF  01,3F
005EE:  RCALL  0536
005F0:  MOVFF  3C,3E
005F4:  MOVLW  0A
005F6:  MOVWF  3F
005F8:  RCALL  0596
005FA:  MOVFF  00,3C
005FE:  MOVF   01,W
00600:  MOVLW  30
00602:  BNZ   0610
00604:  BTFSC  3D.3
00606:  BRA    0618
00608:  BTFSS  3D.0
0060A:  BRA    0618
0060C:  BTFSC  3D.4
0060E:  MOVLW  20
00610:  ADDWF  01,F
00612:  MOVFF  01,3F
00616:  RCALL  0536
00618:  MOVLW  30
0061A:  ADDWF  3C,F
0061C:  MOVFF  3C,3F
00620:  RCALL  0536
00622:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device adc=8
.................... 
.................... #FUSES NOWDT                 	//No Watch Dog Timer
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT
.................... #FUSES NOPROTECT             	//Code not protected from reading
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled
.................... #FUSES NOBROWNOUT            	//No brownout reset
.................... #FUSES BORV21                	//Brownout reset at 2.1V
.................... #FUSES NOPUT                 	//No Power Up Timer
.................... #FUSES NOCPD                 	//No EE protection
.................... #FUSES STVREN                	//Stack full/underflow will cause reset
.................... #FUSES NODEBUG               	//No Debug mode for ICD
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... #FUSES NOWRT                 	//Program memory not write protected
.................... #FUSES NOWRTD                	//Data EEPROM not write protected
.................... #FUSES NOEBTR                	//Memory not protected from table reads
.................... #FUSES NOCPB                 	//No Boot Block code protection
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads
.................... #FUSES NOWRTC                	//configuration not registers write protected
.................... #FUSES NOWRTB                	//Boot block not write protected
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation
.................... #FUSES MCLR                  	//Master Clear pin enabled
.................... 
.................... #use delay(clock=8000000)
*
0010E:  CLRF   FEA
00110:  MOVLW  40
00112:  MOVWF  FE9
00114:  MOVF   FEF,W
00116:  BZ    0132
00118:  MOVLW  02
0011A:  MOVWF  01
0011C:  CLRF   00
0011E:  DECFSZ 00,F
00120:  BRA    011E
00122:  DECFSZ 01,F
00124:  BRA    011C
00126:  MOVLW  97
00128:  MOVWF  00
0012A:  DECFSZ 00,F
0012C:  BRA    012A
0012E:  DECFSZ FEF,F
00130:  BRA    0118
00132:  RETURN 0
.................... 
.................... 
.................... #include "hw.h"
.................... #ifndef _HW_H
.................... #define _HW_H
.................... //=============================================================================
.................... // Definicion 
.................... #define LCD_DB4   PIN_D3
.................... #define LCD_DB5   PIN_D2
.................... #define LCD_DB6   PIN_D1
.................... #define LCD_DB7   PIN_D0
.................... //
.................... #define LCD_RS    PIN_C0
.................... #define LCD_RW    PIN_C1
.................... #define LCD_E     PIN_C2
.................... 
.................... //=============================================================================
.................... #endif
.................... 
.................... #include "flex_lcd.c"
.................... // flex_lcd.c
.................... 
.................... // These pins are for the Microchip PicDem2-Plus board,
.................... // which is what I used to test the driver.  Change these
.................... // pins to fit your own board.
.................... 
.................... //#define LCD_DB4   PIN_B4
.................... //#define LCD_DB5   PIN_B5
.................... //#define LCD_DB6   PIN_B6
.................... //#define LCD_DB7   PIN_B7
.................... //
.................... //#define LCD_RS    PIN_C0
.................... //#define LCD_RW    PIN_C1
.................... //#define LCD_E     PIN_C2
.................... 
.................... // If you only want a 6-pin interface to your LCD, then
.................... // connect the R/W pin on the LCD to ground, and comment
.................... // out the following line.
.................... 
.................... #define USE_LCD_RW   1
.................... 
.................... //========================================
.................... 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line
.................... 
.................... 
.................... int8 const LCD_INIT_STRING[4] =
.................... {
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots
....................  0xc,                    // Display on
....................  1,                      // Clear display
....................  6                       // Increment cursor
....................  };
.................... 
.................... 
.................... //-------------------------------------
.................... void lcd_send_nibble(int8 nibble)
.................... {
.................... // Note:  !! converts an integer expression
.................... // to a boolean (1 or 0).
....................  output_bit(LCD_DB4, !!(nibble & 1));
00134:  BTFSC  47.0
00136:  BRA    013C
00138:  BCF    F8C.3
0013A:  BRA    013E
0013C:  BSF    F8C.3
0013E:  BCF    F95.3
....................  output_bit(LCD_DB5, !!(nibble & 2));
00140:  BTFSC  47.1
00142:  BRA    0148
00144:  BCF    F8C.2
00146:  BRA    014A
00148:  BSF    F8C.2
0014A:  BCF    F95.2
....................  output_bit(LCD_DB6, !!(nibble & 4));
0014C:  BTFSC  47.2
0014E:  BRA    0154
00150:  BCF    F8C.1
00152:  BRA    0156
00154:  BSF    F8C.1
00156:  BCF    F95.1
....................  output_bit(LCD_DB7, !!(nibble & 8));
00158:  BTFSC  47.3
0015A:  BRA    0160
0015C:  BCF    F8C.0
0015E:  BRA    0162
00160:  BSF    F8C.0
00162:  BCF    F95.0
.................... 
....................  delay_cycles(1);
00164:  NOP   
....................  output_high(LCD_E);
00166:  BCF    F94.2
00168:  BSF    F8B.2
....................  delay_us(2);
0016A:  BRA    016C
0016C:  BRA    016E
....................  output_low(LCD_E);
0016E:  BCF    F94.2
00170:  BCF    F8B.2
00172:  RETURN 0
.................... }
.................... 
.................... //-----------------------------------
.................... // This sub-routine is only called by lcd_read_byte().
.................... // It's not a stand-alone routine.  For example, the
.................... // R/W signal is set high by lcd_read_byte() before
.................... // this routine is called.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_nibble(void)
.................... {
.................... int8 retval;
.................... // Create bit variables so that we can easily set
.................... // individual bits in the retval variable.
.................... #bit retval_0 = retval.0
.................... #bit retval_1 = retval.1
.................... #bit retval_2 = retval.2
.................... #bit retval_3 = retval.3
.................... 
.................... retval = 0;
00174:  CLRF   48
.................... 
.................... output_high(LCD_E);
00176:  BCF    F94.2
00178:  BSF    F8B.2
.................... delay_cycles(1);
0017A:  NOP   
.................... 
.................... retval_0 = input(LCD_DB4);
0017C:  BSF    F95.3
0017E:  BCF    48.0
00180:  BTFSC  F83.3
00182:  BSF    48.0
.................... retval_1 = input(LCD_DB5);
00184:  BSF    F95.2
00186:  BCF    48.1
00188:  BTFSC  F83.2
0018A:  BSF    48.1
.................... retval_2 = input(LCD_DB6);
0018C:  BSF    F95.1
0018E:  BCF    48.2
00190:  BTFSC  F83.1
00192:  BSF    48.2
.................... retval_3 = input(LCD_DB7);
00194:  BSF    F95.0
00196:  BCF    48.3
00198:  BTFSC  F83.0
0019A:  BSF    48.3
.................... 
.................... output_low(LCD_E);
0019C:  BCF    F94.2
0019E:  BCF    F8B.2
.................... 
.................... return(retval);
001A0:  MOVFF  48,01
001A4:  RETURN 0
.................... }
.................... #endif
.................... 
.................... //---------------------------------------
.................... // Read a byte from the LCD and return it.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_byte(void)
.................... {
.................... int8 low;
.................... int8 high;
.................... 
.................... output_high(LCD_RW);
001A6:  BCF    F94.1
001A8:  BSF    F8B.1
.................... delay_cycles(1);
001AA:  NOP   
.................... 
.................... high = lcd_read_nibble();
001AC:  RCALL  0174
001AE:  MOVFF  01,47
.................... 
.................... low = lcd_read_nibble();
001B2:  RCALL  0174
001B4:  MOVFF  01,46
.................... 
.................... return( (high<<4) | low);
001B8:  SWAPF  47,W
001BA:  MOVWF  00
001BC:  MOVLW  F0
001BE:  ANDWF  00,F
001C0:  MOVF   00,W
001C2:  IORWF  46,W
001C4:  MOVWF  01
001C6:  GOTO   01D0 (RETURN)
.................... }
.................... #endif
.................... 
.................... //----------------------------------------
.................... // Send a byte to the LCD.
.................... void lcd_send_byte(int8 address, int8 n)
.................... {
.................... output_low(LCD_RS);
001CA:  BCF    F94.0
001CC:  BCF    F8B.0
.................... 
.................... #ifdef USE_LCD_RW
.................... while(bit_test(lcd_read_byte(),7)) ;
001CE:  BRA    01A6
001D0:  MOVFF  01,46
001D4:  BTFSC  01.7
001D6:  BRA    01CE
.................... #else
.................... delay_us(60);
.................... #endif
.................... 
.................... if(address)
001D8:  MOVF   44,F
001DA:  BZ    01E2
....................    output_high(LCD_RS);
001DC:  BCF    F94.0
001DE:  BSF    F8B.0
001E0:  BRA    01E6
.................... else
....................    output_low(LCD_RS);
001E2:  BCF    F94.0
001E4:  BCF    F8B.0
.................... 
....................  delay_cycles(1);
001E6:  NOP   
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
001E8:  BCF    F94.1
001EA:  BCF    F8B.1
.................... delay_cycles(1);
001EC:  NOP   
.................... #endif
.................... 
.................... output_low(LCD_E);
001EE:  BCF    F94.2
001F0:  BCF    F8B.2
.................... 
.................... lcd_send_nibble(n >> 4);
001F2:  SWAPF  45,W
001F4:  MOVWF  46
001F6:  MOVLW  0F
001F8:  ANDWF  46,F
001FA:  MOVFF  46,47
001FE:  RCALL  0134
.................... lcd_send_nibble(n & 0xf);
00200:  MOVF   45,W
00202:  ANDLW  0F
00204:  MOVWF  46
00206:  MOVWF  47
00208:  RCALL  0134
0020A:  RETURN 0
.................... }
.................... 
.................... //----------------------------
.................... void lcd_init(void)
.................... {
.................... int8 i;
.................... 
.................... output_low(LCD_RS);
0020C:  BCF    F94.0
0020E:  BCF    F8B.0
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
00210:  BCF    F94.1
00212:  BCF    F8B.1
.................... #endif
.................... 
.................... output_low(LCD_E);
00214:  BCF    F94.2
00216:  BCF    F8B.2
.................... 
.................... delay_ms(15);
00218:  MOVLW  0F
0021A:  MOVWF  40
0021C:  RCALL  010E
.................... 
.................... for(i=0 ;i < 3; i++)
0021E:  CLRF   31
00220:  MOVF   31,W
00222:  SUBLW  02
00224:  BNC   0236
....................    {
....................     lcd_send_nibble(0x03);
00226:  MOVLW  03
00228:  MOVWF  47
0022A:  RCALL  0134
....................     delay_ms(5);
0022C:  MOVLW  05
0022E:  MOVWF  40
00230:  RCALL  010E
00232:  INCF   31,F
00234:  BRA    0220
....................    }
.................... 
.................... lcd_send_nibble(0x02);
00236:  MOVLW  02
00238:  MOVWF  47
0023A:  RCALL  0134
.................... 
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)
0023C:  CLRF   31
0023E:  MOVF   31,W
00240:  SUBLW  03
00242:  BNC   0256
....................    {
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);
00244:  CLRF   03
00246:  MOVF   31,W
00248:  RCALL  00AE
0024A:  MOVWF  32
0024C:  CLRF   44
0024E:  MOVWF  45
00250:  RCALL  01CA
.................... 
....................     // If the R/W signal is not used, then
....................     // the busy bit can't be polled.  One of
....................     // the init commands takes longer than
....................     // the hard-coded delay of 60 us, so in
....................     // that case, lets just do a 5 ms delay
....................     // after all four of them.
....................     #ifndef USE_LCD_RW
00252:  INCF   31,F
00254:  BRA    023E
....................     delay_ms(5);
....................     #endif
....................    }
00256:  GOTO   0908 (RETURN)
.................... 
.................... }
.................... 
.................... //----------------------------
.................... 
.................... void lcd_gotoxy(int8 x, int8 y)
.................... {
.................... int8 address;
.................... 
.................... if(y != 1)
0025A:  DECFSZ 41,W
0025C:  BRA    0260
0025E:  BRA    0266
....................    address = lcd_line_two;
00260:  MOVLW  40
00262:  MOVWF  42
00264:  BRA    0268
.................... else
....................    address=0;
00266:  CLRF   42
.................... 
.................... address += x-1;
00268:  MOVLW  01
0026A:  SUBWF  40,W
0026C:  ADDWF  42,F
.................... lcd_send_byte(0, 0x80 | address);
0026E:  MOVF   42,W
00270:  IORLW  80
00272:  MOVWF  43
00274:  CLRF   44
00276:  MOVWF  45
00278:  RCALL  01CA
0027A:  RETURN 0
.................... }
.................... 
.................... //-----------------------------
.................... void lcd_putc(char c)
.................... {
....................  switch(c)
*
00536:  MOVF   3F,W
00538:  XORLW  0C
0053A:  BZ    0546
0053C:  XORLW  06
0053E:  BZ    0556
00540:  XORLW  02
00542:  BZ    0562
00544:  BRA    056C
....................    {
....................     case '\f': //clear
....................       lcd_send_byte(0,1);
00546:  CLRF   44
00548:  MOVLW  01
0054A:  MOVWF  45
0054C:  RCALL  01CA
....................       delay_ms(2);
0054E:  MOVLW  02
00550:  MOVWF  40
00552:  RCALL  010E
....................       break;
00554:  BRA    0576
.................... 
....................     case '\n': //enter
....................        lcd_gotoxy(1,2);
00556:  MOVLW  01
00558:  MOVWF  40
0055A:  MOVLW  02
0055C:  MOVWF  41
0055E:  RCALL  025A
....................        break;
00560:  BRA    0576
.................... 
....................     case '\b': //lcd_gotoxy(1,1);
....................        lcd_send_byte(0,0x10);
00562:  CLRF   44
00564:  MOVLW  10
00566:  MOVWF  45
00568:  RCALL  01CA
....................        break;
0056A:  BRA    0576
.................... 
....................     default:
....................        lcd_send_byte(1,c);
0056C:  MOVLW  01
0056E:  MOVWF  44
00570:  MOVFF  3F,45
00574:  RCALL  01CA
....................        break;
....................    }
00576:  RETURN 0
.................... }
.................... 
.................... //------------------------------
.................... #ifdef USE_LCD_RW
.................... char lcd_getc(int8 x, int8 y)
.................... {
.................... char value;
.................... 
.................... lcd_gotoxy(x,y);
.................... 
.................... // Wait until busy flag is low.
.................... while(bit_test(lcd_read_byte(),7));
.................... 
.................... output_high(LCD_RS);
.................... value = lcd_read_byte();
.................... output_low(lcd_RS);
.................... 
.................... return(value);
.................... }
.................... #endif
.................... 
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
.................... 
.................... 
.................... 
.................... float a = 0;
.................... int1 on = 1;
.................... int1 opressed = 0;
.................... int1 pressed = 0;
.................... int1 tick = 0;
.................... int8 c1=0;
.................... int8 c2=0;
.................... int1 rele = 1;
.................... int1 cool = 1;
.................... int1 debug = 1;
.................... int8 mode = 0;
.................... int8 maxt = 75;
.................... int8 mint = 25;
.................... int8 maxh = 75;
.................... int8 minh = 25;
.................... int8 oldtemp = 0;
.................... int8 oldhum = 0;
.................... int8 selectedo = 0;
.................... int8 line = 0;
.................... 
.................... int8 oB[7];
.................... 
.................... 
.................... int8 CheckBut(int8 selectedb=100){
....................    
....................    int8 a = input_c();
....................    int8 b = 0;
....................    int8 i; 
....................    if(selectedb == 100){
....................       for(i = 3; i<8;i++){
....................       if(bit_test(a,i)){
....................          b = i-2;
....................          break;
....................          }
....................       }
....................    }
....................    else{
....................       switch(selectedb){
....................       case 9:
....................          b=(input(PIN_D7));
....................          break;
....................       default:
....................          b = bit_test(a,selectedb+2);
....................          break;
....................       }
....................    }
....................    return(b);
.................... }
.................... 
.................... void Update(int8 but = 0){
....................    int8 botones[7];
....................    set_adc_channel(0);
*
00624:  MOVLW  00
00626:  MOVWF  01
00628:  MOVF   FC2,W
0062A:  ANDLW  C3
0062C:  IORWF  01,W
0062E:  MOVWF  FC2
....................    delay_us(10);
00630:  MOVLW  06
00632:  MOVWF  00
00634:  DECFSZ 00,F
00636:  BRA    0634
00638:  NOP   
....................    int8 temp = (int8)((float)read_adc()* 100 / 255);
0063A:  BSF    FC2.1
0063C:  BTFSC  FC2.1
0063E:  BRA    063C
00640:  MOVF   FC4,W
00642:  CLRF   3D
00644:  MOVWF  3C
00646:  RCALL  027C
00648:  MOVFF  03,3F
0064C:  MOVFF  02,3E
00650:  MOVFF  01,3D
00654:  MOVFF  00,3C
00658:  MOVFF  03,43
0065C:  MOVFF  02,42
00660:  MOVFF  01,41
00664:  MOVFF  00,40
00668:  CLRF   47
0066A:  CLRF   46
0066C:  MOVLW  48
0066E:  MOVWF  45
00670:  MOVLW  85
00672:  MOVWF  44
00674:  RCALL  02B2
00676:  MOVFF  03,3F
0067A:  MOVFF  02,3E
0067E:  MOVFF  01,3D
00682:  MOVFF  00,3C
00686:  MOVFF  03,43
0068A:  MOVFF  02,42
0068E:  MOVFF  01,41
00692:  MOVFF  00,40
00696:  CLRF   47
00698:  CLRF   46
0069A:  MOVLW  7F
0069C:  MOVWF  45
0069E:  MOVLW  86
006A0:  MOVWF  44
006A2:  RCALL  03A4
006A4:  MOVFF  03,3F
006A8:  MOVFF  02,3E
006AC:  MOVFF  01,3D
006B0:  MOVFF  00,3C
006B4:  RCALL  04FE
006B6:  MOVFF  01,39
....................    set_adc_channel(1);
006BA:  MOVLW  04
006BC:  MOVWF  01
006BE:  MOVF   FC2,W
006C0:  ANDLW  C3
006C2:  IORWF  01,W
006C4:  MOVWF  FC2
....................    delay_us(10);
006C6:  MOVLW  06
006C8:  MOVWF  00
006CA:  DECFSZ 00,F
006CC:  BRA    06CA
006CE:  NOP   
....................    int8 hum = (int8)((float)read_adc()* 100 / 255);
006D0:  BSF    FC2.1
006D2:  BTFSC  FC2.1
006D4:  BRA    06D2
006D6:  MOVF   FC4,W
006D8:  CLRF   3D
006DA:  MOVWF  3C
006DC:  RCALL  027C
006DE:  MOVFF  03,3F
006E2:  MOVFF  02,3E
006E6:  MOVFF  01,3D
006EA:  MOVFF  00,3C
006EE:  MOVFF  03,43
006F2:  MOVFF  02,42
006F6:  MOVFF  01,41
006FA:  MOVFF  00,40
006FE:  CLRF   47
00700:  CLRF   46
00702:  MOVLW  48
00704:  MOVWF  45
00706:  MOVLW  85
00708:  MOVWF  44
0070A:  RCALL  02B2
0070C:  MOVFF  03,3F
00710:  MOVFF  02,3E
00714:  MOVFF  01,3D
00718:  MOVFF  00,3C
0071C:  MOVFF  03,43
00720:  MOVFF  02,42
00724:  MOVFF  01,41
00728:  MOVFF  00,40
0072C:  CLRF   47
0072E:  CLRF   46
00730:  MOVLW  7F
00732:  MOVWF  45
00734:  MOVLW  86
00736:  MOVWF  44
00738:  RCALL  03A4
0073A:  MOVFF  03,3F
0073E:  MOVFF  02,3E
00742:  MOVFF  01,3D
00746:  MOVFF  00,3C
0074A:  RCALL  04FE
0074C:  MOVFF  01,3A
....................    botones[0] = input(PIN_C3);
00750:  BSF    F94.3
00752:  CLRF   32
00754:  BTFSC  F82.3
00756:  INCF   32,F
....................    botones[1] = input(PIN_C4);
00758:  BSF    F94.4
0075A:  CLRF   33
0075C:  BTFSC  F82.4
0075E:  INCF   33,F
....................    botones[2] = input(PIN_C5);
00760:  BSF    F94.5
00762:  CLRF   34
00764:  BTFSC  F82.5
00766:  INCF   34,F
....................    botones[3] = input(PIN_C6);
00768:  BSF    F94.6
0076A:  CLRF   35
0076C:  BTFSC  F82.6
0076E:  INCF   35,F
....................    botones[4] = input(PIN_C7);
00770:  BSF    F94.7
00772:  CLRF   36
00774:  BTFSC  F82.7
00776:  INCF   36,F
....................    botones[5] = input(PIN_D6);
00778:  BSF    F95.6
0077A:  CLRF   37
0077C:  BTFSC  F83.6
0077E:  INCF   37,F
....................    botones[6] = input(PIN_D7);
00780:  BSF    F95.7
00782:  CLRF   38
00784:  BTFSC  F83.7
00786:  INCF   38,F
....................     
....................    for(int8 i = 0; i < 7; i++){
00788:  CLRF   3B
0078A:  MOVF   3B,W
0078C:  SUBLW  06
0078E:  BNC   07F8
....................       if(botones[i] != oB[i] || temp != oldtemp || hum != oldhum){
00790:  CLRF   03
00792:  MOVF   3B,W
00794:  ADDLW  32
00796:  MOVWF  FE9
00798:  MOVLW  00
0079A:  ADDWFC 03,W
0079C:  MOVWF  FEA
0079E:  MOVFF  FEF,3C
007A2:  CLRF   03
007A4:  MOVF   3B,W
007A6:  ADDLW  29
007A8:  MOVWF  FE9
007AA:  MOVLW  00
007AC:  ADDWFC 03,W
007AE:  MOVWF  FEA
007B0:  MOVF   FEF,W
007B2:  SUBWF  3C,W
007B4:  BNZ   07C2
007B6:  MOVF   25,W
007B8:  SUBWF  39,W
007BA:  BNZ   07C2
007BC:  MOVF   26,W
007BE:  SUBWF  3A,W
007C0:  BZ    07F4
....................          printf(LCD_PUTC,"\fSequedad:    %u\nTemperatura: %u", hum, temp);
007C2:  MOVLW  C2
007C4:  MOVWF  FF6
007C6:  MOVLW  00
007C8:  MOVWF  FF7
007CA:  MOVLW  0E
007CC:  MOVWF  3C
007CE:  RCALL  0578
007D0:  MOVFF  3A,3C
007D4:  MOVLW  1B
007D6:  MOVWF  3D
007D8:  RCALL  05BE
007DA:  MOVLW  D2
007DC:  MOVWF  FF6
007DE:  MOVLW  00
007E0:  MOVWF  FF7
007E2:  MOVLW  0E
007E4:  MOVWF  3C
007E6:  RCALL  0578
007E8:  MOVFF  39,3C
007EC:  MOVLW  1B
007EE:  MOVWF  3D
007F0:  RCALL  05BE
....................          break;
007F2:  BRA    07F8
....................          }
007F4:  INCF   3B,F
007F6:  BRA    078A
....................    }
....................    if(hum < minh){
007F8:  MOVF   24,W
007FA:  SUBWF  3A,W
007FC:  BC    0802
....................       rele = 0;
007FE:  BCF    1D.4
....................    }
00800:  BRA    080A
....................    else if(hum > maxh){
00802:  MOVF   3A,W
00804:  SUBWF  23,W
00806:  BC    080A
....................       rele = 1;
00808:  BSF    1D.4
....................    }
....................    if(temp < mint){
0080A:  MOVF   22,W
0080C:  SUBWF  39,W
0080E:  BC    0814
....................       cool = 0;
00810:  BCF    1D.5
....................    }
00812:  BRA    081C
....................    else if(temp > maxt){
00814:  MOVF   39,W
00816:  SUBWF  21,W
00818:  BC    081C
....................       cool = 1;
0081A:  BSF    1D.5
....................    }
....................    oldtemp = temp;
0081C:  MOVFF  39,25
....................    oldhum = hum;
00820:  MOVFF  3A,26
....................    oB[0] = botones[0];
00824:  MOVFF  32,29
....................    oB[1] = botones[1];
00828:  MOVFF  33,2A
....................    oB[2] = botones[2];
0082C:  MOVFF  34,2B
....................    oB[3] = botones[3];
00830:  MOVFF  35,2C
....................    oB[4] = botones[4];
00834:  MOVFF  36,2D
....................    oB[5] = botones[5];
00838:  MOVFF  37,2E
....................    oB[6] = botones[6];
0083C:  MOVFF  38,2F
....................    
....................    
....................    output_bit(PIN_B3,rele);
00840:  BTFSC  1D.4
00842:  BRA    0848
00844:  BCF    F8A.3
00846:  BRA    084A
00848:  BSF    F8A.3
0084A:  BCF    F93.3
....................    output_bit(PIN_B5,cool);
0084C:  BTFSC  1D.5
0084E:  BRA    0854
00850:  BCF    F8A.5
00852:  BRA    0856
00854:  BSF    F8A.5
00856:  BCF    F93.5
00858:  GOTO   0942 (RETURN)
.................... }
....................    
.................... 
.................... 
.................... 
.................... 
....................    
.................... //100us
.................... #int_TIMER2
.................... void  TIMER2_isr(void) 
.................... {
....................    if(c1<100){
*
000E4:  MOVF   1E,W
000E6:  SUBLW  63
000E8:  BNC   00EE
....................       c1++;
000EA:  INCF   1E,F
....................   }
000EC:  BRA    0108
....................   else{
....................       c1 = 0;
000EE:  CLRF   1E
....................       c2++;
000F0:  INCF   1F,F
....................       if(c2 >= 50 ){
000F2:  MOVF   1F,W
000F4:  SUBLW  31
000F6:  BC    0108
....................          c2 = 0;
000F8:  CLRF   1F
....................          debug = !debug;
000FA:  BTG    1D.6
....................          output_bit(PIN_B4,debug);
000FC:  BTFSC  1D.6
000FE:  BRA    0104
00100:  BCF    F8A.4
00102:  BRA    0106
00104:  BSF    F8A.4
00106:  BCF    F93.4
....................       }
00108:  BCF    F9E.1
0010A:  GOTO   0060
....................   }}
.................... 
.................... 
.................... void main()
*
0085C:  CLRF   FF8
0085E:  BCF    FD0.7
00860:  BSF    07.7
00862:  MOVLW  70
00864:  MOVWF  FD3
00866:  CLRF   F9B
00868:  MOVF   FD3,W
0086A:  CLRF   1C
0086C:  CLRF   1B
0086E:  CLRF   1A
00870:  CLRF   19
00872:  BSF    1D.0
00874:  BCF    1D.1
00876:  BCF    1D.2
00878:  BCF    1D.3
0087A:  CLRF   1E
0087C:  CLRF   1F
0087E:  BSF    1D.4
00880:  BSF    1D.5
00882:  BSF    1D.6
00884:  CLRF   20
00886:  MOVLW  4B
00888:  MOVWF  21
0088A:  MOVLW  19
0088C:  MOVWF  22
0088E:  MOVLW  4B
00890:  MOVWF  23
00892:  MOVLW  19
00894:  MOVWF  24
00896:  CLRF   25
00898:  CLRF   26
0089A:  CLRF   27
0089C:  CLRF   28
0089E:  MOVF   FC1,W
008A0:  ANDLW  C0
008A2:  IORLW  0F
008A4:  MOVWF  FC1
008A6:  MOVLW  07
008A8:  MOVWF  FB4
.................... {
....................    setup_adc_ports(AN0_TO_AN1|VSS_VDD);
008AA:  MOVF   FC1,W
008AC:  ANDLW  C0
008AE:  IORLW  0D
008B0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2|ADC_TAD_MUL_0);
008B2:  MOVF   FC0,W
008B4:  ANDLW  C0
008B6:  MOVWF  FC0
008B8:  BCF    FC0.7
008BA:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED);
008BC:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED);
008BE:  BCF    FC6.5
008C0:  BCF    F94.5
008C2:  BSF    F94.4
008C4:  BCF    F94.3
008C6:  MOVLW  01
008C8:  MOVWF  FC6
008CA:  MOVLW  00
008CC:  MOVWF  FC7
....................    setup_wdt(WDT_OFF);
008CE:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL);
008D0:  MOVLW  80
008D2:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED);
008D4:  CLRF   FCD
....................    setup_timer_2(T2_DIV_BY_1,199,1);
008D6:  MOVLW  00
008D8:  IORLW  04
008DA:  MOVWF  FCA
008DC:  MOVLW  C7
008DE:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC);
008E0:  MOVLW  07
008E2:  MOVWF  FB4
008E4:  MOVF   F92,W
008E6:  MOVWF  F92
008E8:  MOVLW  06
008EA:  MOVWF  00
008EC:  DECFSZ 00,F
008EE:  BRA    08EC
008F0:  NOP   
008F2:  MOVF   FB4,W
008F4:  BCF    FA1.6
....................    setup_vref(FALSE);
008F6:  CLRF   FB5
....................    enable_interrupts(INT_TIMER2);
008F8:  BSF    F9D.1
....................    enable_interrupts(GLOBAL);
008FA:  MOVLW  C0
008FC:  IORWF  FF2,F
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC|OSC_NORMAL|OSC_PLL_OFF);
008FE:  MOVLW  72
00900:  MOVWF  FD3
00902:  CLRF   F9B
00904:  MOVF   FD3,W
....................    
....................    lcd_init();
00906:  BRA    020C
....................    lcd_gotoxy(1,1);
00908:  MOVLW  01
0090A:  MOVWF  40
0090C:  MOVWF  41
0090E:  RCALL  025A
....................    output_bit(PIN_B3,0);
00910:  BCF    F8A.3
00912:  BCF    F93.3
....................    output_bit(PIN_B1,0);
00914:  BCF    F8A.1
00916:  BCF    F93.1
....................    lcd_gotoxy(1,1);
00918:  MOVLW  01
0091A:  MOVWF  40
0091C:  MOVWF  41
0091E:  RCALL  025A
....................    
....................    for(int8 i = 0; i < 7; i++){
00920:  CLRF   30
00922:  MOVF   30,W
00924:  SUBLW  06
00926:  BNC   093E
....................       oB[i]=1;
00928:  CLRF   03
0092A:  MOVF   30,W
0092C:  ADDLW  29
0092E:  MOVWF  FE9
00930:  MOVLW  00
00932:  ADDWFC 03,W
00934:  MOVWF  FEA
00936:  MOVLW  01
00938:  MOVWF  FEF
0093A:  INCF   30,F
0093C:  BRA    0922
....................    }
....................    while(1){
....................      Update();
0093E:  CLRF   31
00940:  BRA    0624
....................      delay_ms(150);
00942:  MOVLW  96
00944:  MOVWF  40
00946:  CALL   010E
0094A:  BRA    093E
....................    }
.................... 
.................... }
0094C:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 0E19   NOPUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
